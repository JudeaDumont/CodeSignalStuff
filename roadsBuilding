std::vector<std::vector<int>> roadsBuilding(int cities, std::vector<std::vector<int>> roads) {
	std::vector<std::vector<int>> newRoads;
	std::map<int, std::set<int>> roadMap;
	for (int i = 0; i < roads.size(); ++i)
	{
		if (roadMap.find(roads[i][0]) == roadMap.end())
		{
			roadMap.insert(std::make_pair(roads[i][0], std::set<int>()));
			roadMap[roads[i][0]].insert(roads[i][1]);
		}
		else
		{
			roadMap[roads[i][0]].insert(roads[i][1]);
		}
		if (roadMap.find(roads[i][1]) == roadMap.end())
		{
			roadMap.insert(std::make_pair(roads[i][1], std::set<int>()));
			roadMap[roads[i][1]].insert(roads[i][0]);
		}
		else
		{
			roadMap[roads[i][1]].insert(roads[i][0]);
		}
	}
	for (int i = 0; i < cities; ++i)
	{
		if (roadMap.find(i) == roadMap.end())
		{
			roadMap.insert(std::make_pair(i, std::set<int>()));
			for (int j = 0; j < cities; ++j)
			{
				if (i != j)
				{
					newRoads.push_back({ i,j });
					roadMap.at(i).insert(j);

					roadMap.insert(std::make_pair(j, std::set<int>()));
					roadMap.at(j).insert(i);
				}
			}
		}
		else
		{
			for (int j = 0; j < cities; ++j)
			{
				if (i != j)
				{
					if (roadMap.at(i).find(j) == roadMap.at(i).end())
					{
						newRoads.push_back({ i,j });
						roadMap.at(i).insert(j);

						roadMap.insert(std::make_pair(j, std::set<int>()));
						roadMap.at(j).insert(i);
					}
				}
			}
		}
	}

	return newRoads;
}
