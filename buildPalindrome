std::string buildPalindrome(std::string st) {
	//find the first occurence of a character that matches the last character in the string and check all the in between characters for palindrome satisfaction.
	int prefixCut = -1;
	int j, k;
	for (int i = 0; i < st.size() -1; ++i) 
	{
		if (st[i] == st[st.size() - 1]) 
		{
			j = i + 1;
			k = st.size() - 2;
			while (st[j] == st[k] && j < k)
			{
				++j;
				--k;
			}

			if (j >= k) 
			{
				//found complete palindrome
				if (i == 0) 
				{
					//whole thing is a palindrome
					return st;
				}
				prefixCut = i;
				break;
			}
		}
	}

	//if no match is found that means the whole series of characters besides the last one is used as the prefix cut.

	std::string add;
	if (prefixCut == -1)
	{
		add = st.substr(0, st.size() - 1); // all except last character
		std::reverse(add.begin(), add.end());
		st += add;
	}
	else 
	{
		add = st.substr(0, prefixCut); // all except last character
		std::reverse(add.begin(), add.end());
		st += add;
	}


	//if the palindrome is  not satisfied find the next character that matches the last character and try again.

	//if the palindrom is satisfied then cut the prefix off that is necessary to confrom the whole string to a palindrome.
	return st;
}
