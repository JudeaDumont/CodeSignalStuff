int differentSquares(std::vector<std::vector<int>> matrix) {
	const int mSize = (matrix.size() - 1) * (matrix[0].size() - 1);
	int** m = new int*[mSize];
	int* data = new int[4 * mSize];
	
	int i;
	for (i = 0; i < mSize; ++i)
	{
		m[i] = data + (i * 4);
	}

	int s[4];
	int j;
	int k;
	int diffSquares = 0;
	for (i = 0; i != matrix.size() - 1; ++i)
	{
		for (j = 0; j != matrix[0].size() - 1; ++j)
		{
			s[0] = (matrix[i][j]);
			s[1] = (matrix[i][j + 1]);
			s[2] = (matrix[i + 1][j]);
			s[3] = (matrix[i + 1][j + 1]);

			bool found = false;
			for (k = 0; k != mSize; ++k)
			{
				if (m[k][0] == s[0] &&
					m[k][1] == s[1] &&
					m[k][2] == s[2] &&
					m[k][3] == s[3])
				{
					found = true;
					k = mSize - 1;
				}
			}


			if (!found)
			{
				m[i * (matrix[0].size() - 1) + j][0] = s[0];
				m[i * (matrix[0].size() - 1) + j][1] = s[1];
				m[i * (matrix[0].size() - 1) + j][2] = s[2];
				m[i * (matrix[0].size() - 1) + j][3] = s[3];
				++diffSquares;
			}
		}
	}

	delete[] data;
	delete[] m;
	return diffSquares;
}
